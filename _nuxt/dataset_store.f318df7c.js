import{aa as R,j as y,s as f,az as h,aA as w}from"./entry.102678be.js";import{b as D,u as g}from"./useLegacyService.c9b3bbf8.js";import{a as u}from"./dimension_store.1aca34b5.js";const V=R("DatasetStore",{state:()=>({datasets:[],treeDatasets:[],datasetDraftRefs:{}}),actions:{async saveDataset(e){const{merge:t}=y(),a=t?g:D,{dataset:i,error:n}=await a().addDataset(e);if(n)throw f(n.message),n;{const m={...i,isDataset:!0};return this.datasets.push(m),this.buildDatasetDraftRefs([i.id]),Promise.resolve(m)}},async removeDataset(e){const{error:t}=await D().deleteDataset(e);if(t)throw f(t.message),t;h().deleteItem({list:this.datasets,value:e})},async editDataset(e){const{error:t,dataset:a}=await D().putDataset(e);if(t)throw f(t.message),t;return h().updateItem({list:this.datasets,value:a.id,item:{name:a.name}}),{dataset:a}},async fetchDatasets(){const{datasets:e,error:t}=await D().getDatasets();if(t)throw t;this.datasets=u().setMetadataType(e,"isDataset"),this.buildDatasetDraftRefs(e.map(a=>a.id))},async fetchTreeDatasets(){const{treeDatasets:e,error:t}=await D().getDatasetsTree();if(t)throw t;this.treeDatasets=u().setMetadataType(e,"isDataset"),this.buildDatasetDraftRefs(e.map(a=>a.id))},writeDraft(e,{datasetId:t,dimensionsAmount:a,key:i,line:n}){const m=s=>{const o=s.payload.metricContentForms.findIndex(r=>r.metricId===e.metricContentForms[0].metricId);o>-1?s.payload.metricContentForms[o]=e.metricContentForms[0]:s.payload.metricContentForms.push(e.metricContentForms[0])},l=s=>{const o=s.payload.datasetDimensionContentForms.findIndex(r=>r.datasetDimensionId===e.datasetDimensionContentForms[0].datasetDimensionId);o>-1?s.payload.datasetDimensionContentForms[o]=e.datasetDimensionContentForms[0]:s.payload.datasetDimensionContentForms.push(e.datasetDimensionContentForms[0])};if(this.datasetDraftRefs[t]||this.buildDatasetDraftRefs([t]),!this.datasetDraftRefs[t][i])this.datasetDraftRefs[t][i]={lineView:n,payload:e,dimensionsAmount:a};else{const s=this.datasetDraftRefs[t][i],o=e.datasetDimensionContentForms.length,r=e.metricContentForms.length;s.lineView=n,s.dimensionsAmount=a,o&&l(s),r&&m(s)}},buildDatasetDraftRefs(e){e.forEach(t=>{this.datasetDraftRefs[t]={}})},cleanDatasetDraftRefs(){this.datasetDraftRefs={}},cleanDraftsByDatasetId(e,t){t!=null&&t.length?t.forEach(a=>{delete this.datasetDraftRefs[e][a]}):delete this.datasetDraftRefs[e]}},getters:{getFullFilledDrafts:e=>t=>{var i,n,m;const a=[];for(const l in e.datasetDraftRefs[t]){const s=e.datasetDraftRefs[t][l],o=(i=s.lineView)==null?void 0:i.datasetDimensionContentViews.length;if(s){const r=(n=s.lineView)==null?void 0:n.datasetDimensionContentViews.slice(0,s.dimensionsAmount),d=(m=s.lineView)==null?void 0:m.datasetDimensionContentViews.slice(s.dimensionsAmount,o),p=r==null?void 0:r.every(c=>c!==null),F=d==null?void 0:d.some(c=>c!==null);p&&F&&a.push(w(s.payload))}}return a},getDatasetDraft:e=>t=>e.datasetDraftRefs[t],getAllMetricsOfAllDatasets:e=>e.datasets.map(t=>t.metricViews).flat().map(t=>({...t,name:t.metricName}))},persist:{key:"dataset-store"}});export{V as u};
